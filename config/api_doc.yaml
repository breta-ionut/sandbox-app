openapi: '3.0.0'

info:
    version: 0.1.0
    title: Sandbox API
    license: {name: MIT}

security:
    - TokenAuth: []

paths:
    /api/image/{token}/{style}:
        get:
            summary: Get image
            description: 'Gets content of image with the given token with an optional style applied.'
            tags: [Image]
            parameters:
                - in: path
                  name: token
                  schema: {type: string}
                  required: true
                  description: 'The token to identify the image.'
                - in: path
                  name: style
                  schema: {type: string}
                  required: false
                  allowEmptyValue: true
                  description: 'The style to be applied on the image content. If not provided, the original image content will be retrieved.'
            responses:
                '301':
                    description: 'A redirect to the public URL of the successfully retrieved image.'
                '500':
                    description: 'If an internal error occurred.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/ErrorResponse'}

    /api/image:
        post:
            summary: Upload image
            description: 'Uploads an image to the server.'
            tags: [Image]
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                image:
                                    type: string
                                    format: binary
            responses:
                '201':
                    description: 'If the upload was successful.'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id: {type: integer}
                                    originalPublicUrl:
                                        type: string
                                        format: uri
                                    publicUrlsPerStyles:
                                        type: object
                                        additionalProperties: {type: string}
                '400':
                    description: 'If no image was sent or the one sent is invalid.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/ValidationErrorResponse'}
                '500':
                    description: 'If an internal error occurred.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/ErrorResponse'}

    /api/user:
        get:
            summary: Get current user
            description: 'Gets the data of the currently logged in user.'
            tags: [User]
            responses:
                '200':
                    description: 'If the data of the current user is successfully returned.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/UserResponse'}
                '401':
                    description: 'If the request is anonymous.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/ErrorResponse'}
                '500':
                    description: 'If an internal error occurred.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/ErrorResponse'}

        post:
            summary: Register
            description: 'Registers a user given its data.'
            tags: [User]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                firstName: {type: string}
                                lastName: {type: string}
                                email:
                                    type: string
                                    format: email
                                plainPassword:
                                    type: string
                                    format: password
            responses:
                '201':
                    description: 'If the user was successfully registered.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/UserResponse'}
                '400':
                    description: 'If the data sent for register is malformed (e.g. bad JSON) or invalid (e.g. email is already in use).'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/ValidationErrorResponse'}
                '403':
                    description: 'If the request was made by an authenticated user.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/ErrorResponse'}
                '500':
                    description: 'If an internal error occurred.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/ErrorResponse'}

    /api/user/login:
        post:
            summary: Login
            description: 'Logs in a user given its credentials.'
            tags: [User]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                username:
                                    type: string
                                    format: email
                                password:
                                    type: string
                                    format: password
            responses:
                '200':
                    description: 'If the user successfully logged in.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/UserResponse'}
                '400':
                    description: 'If the data sent for login is malformed (e.g. bad JSON) or invalid (e.g. email has invalid format).'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/ValidationErrorResponse'}
                '401':
                    description: 'If the login was unsuccessful.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/ErrorResponse'}
                '403':
                    description: 'If the request was made by an authenticated user.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/ErrorResponse'}
                '500':
                    description: 'If an internal error occurred.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/ErrorResponse'}

    /api/user/logout:
        delete:
            summary: Logout
            description: 'Logs out the current user.'
            tags: [User]
            responses:
                '204':
                    description: 'If the current user was successfully logged out.'
                '500':
                    description: 'If an internal error occurred.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/responses/ErrorResponse'}

components:
    securitySchemes:
        TokenAuth:
            type: apiKey
            in: header
            name: Authorization

    responses:
        UserResponse:
            type: object
            properties:
                id: {type: integer}
                firstName: {type: string}
                lastName: {type: string}
                email:
                    type: string
                    format: email
                currentToken:
                    type: object
                    properties:
                        token: {type: string}
                        expiresAt:
                            type: string
                            format: date-time

        # Error responses.
        ErrorResponseDebug:
            type: object
            properties:
                message: {type: string}
                class: {type: string}
                trace:
                    type: array
                    items: {type: object}

        ErrorResponse:
            type: object
            properties:
                title: {type: string}
                code: {type: integer}
                status: {type: integer}
                detail: {type: string}
                debug: {$ref: '#/components/responses/ErrorResponseDebug'}

        ValidationErrorResponse:
            type: object
            properties:
                title: {type: string}
                code: {type: integer}
                status: {type: integer}
                detail: {type: string}
                violations:
                    type: array
                    items:
                        type: object
                        properties:
                            propertyPath: {type: string}
                            title: {type: string}
                            parameters:
                                type: array
                                items: {type: string}
                            type: {type: string}
                            payload: {type: object}
                debug: {$ref: '#/components/responses/ErrorResponseDebug'}
        # End of - Error responses.
